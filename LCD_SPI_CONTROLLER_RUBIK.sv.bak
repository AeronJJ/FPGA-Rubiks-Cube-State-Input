module LCD_SPI_CONTROLLER_RUBIK (
//	MAX10_CLK1_50,
	i_clk_100MHz,
	
	bufferData,
	bufferClk,
	
	o_cs,
	o_dcrs,
	o_sdi,
	o_sck,
	o_lcdrst
);

//input MAX10_CLK1_50;

input [15:0] bufferData;
output reg bufferClk;

reg lowByte = 1'b1;
assign bufferClk = !lowByte;

output o_cs;
output o_dcrs;
output o_sdi;
output o_sck;
output reg o_lcdrst;

input i_clk_100MHz;
//wire i_clk_100MHz;

//pll	pll_inst (
//	.inclk0 ( MAX10_CLK1_50 ),
//	.c0 ( i_clk_100MHz )
//	);
	
localparam CLK_FREQ_MHz = 100;

reg i_en;
reg [7:0] i_data;
reg [1:0] i_cdr;

wire o_busy;
wire [7:0] o_data;

LCD_SPI_MASTER_IMPROVED spi (
	i_en,
	i_cdr, // 2 bits, command/data and send/send+receive.
	i_clk_100MHz,
	i_data,
	
	o_busy,
	
	o_cs,
	o_dcrs,
	o_sdi,
	o_sck
);

localparam INIT_SEQ_LEN = 52;
reg [5:0] init_counter = 6'b0;
reg[8:0] INIT_SEQ [0:INIT_SEQ_LEN-1] = '{
	// Turn off Display
	{1'b0, 8'h28},
	// Init (??)
	{1'b0, 8'hCF}, {1'b1, 8'h00}, {1'b1, 8'h83}, {1'b1, 8'h30}, 
	{1'b0, 8'hED}, {1'b1, 8'h64}, {1'b1, 8'h03}, {1'b1, 8'h12}, {1'b1, 8'h81},
	{1'b0, 8'hE8}, {1'b1, 8'h85}, {1'b1, 8'h01}, {1'b1, 8'h79}, 
	{1'b0, 8'hCB}, {1'b1, 8'h39}, {1'b1, 8'h2C}, {1'b1, 8'h00}, {1'b1, 8'h34}, {1'b1, 8'h02},
	{1'b0, 8'hF7}, {1'b1, 8'h20},
	{1'b0, 8'hEA}, {1'b1, 8'h00}, {1'b1, 8'h00},
	// Power Control
	{1'b0, 8'hC0}, {1'b1, 8'h26},
	{1'b0, 8'hC1}, {1'b1, 8'h11},
	// VCOM
	{1'b0, 8'hC5}, {1'b1, 8'h35}, {1'b1, 8'h3E},
	{1'b0, 8'hC7}, {1'b1, 8'hBE},
	// Memory Access Control
	{1'b0, 8'h3A}, {1'b1, 8'h55},
	// Frame Rate
	{1'b0, 8'hB1}, {1'b1, 8'h00}, {1'b1, 8'h1B},
	// Gamma
	{1'b0, 8'h26}, {1'b1, 8'h01},
	// Brightness
	{1'b0, 8'h51}, {1'b1, 8'hFF},
	// Display
	{1'b0, 8'hB7}, {1'b1, 8'h07},
	{1'b0, 8'hB6}, {1'b1, 8'h0A}, {1'b1, 8'h82}, {1'b1, 8'h27}, {1'b1, 8'h00},
	{1'b0, 8'h29}, // Enable Display
	{1'b0, 8'h2C} // Start  Memory-Write
};

enum logic[2:0] {c_START, c_RESET_WAIT, c_DELAY, c_INIT, c_DATA} current_state = c_START;

reg [32:0] delay_left = 24'b0;

always @ (posedge i_clk_100MHz) begin
	i_en <= 1'b0;

	if (delay_left > 24'b0) begin
		delay_left <= delay_left - 1'b1; // Wait for delay to count down
	end
	else if (~o_busy && !i_en) begin // Waits for SPI to not be busy
	// State Machine Logic
		case (current_state)
			c_START: begin
				o_lcdrst = 1'b0; // Reset LCD
				delay_left <= 24'(CLK_FREQ_MHz*100); // Wait for reset to propagate ~ 0.1ms
				current_state <= c_RESET_WAIT;
			end
			
			c_RESET_WAIT: begin
				o_lcdrst = 1'b1; // Release reset
				delay_left <= 24'(CLK_FREQ_MHz*15000); // Wait for lcd to power-up ~ 150ms
				current_state <= c_DELAY;
			end
			
			c_DELAY: begin
				i_cdr <= 2'b00;
				i_data <= 8'h11; // Sleep Out
				i_en <= 1'b1;
				delay_left <= 24'(CLK_FREQ_MHz*15000); // Wait for lcd to exit sleep, > 120ms
				current_state <= c_INIT;
			end
			
			c_INIT: begin
				if (init_counter < INIT_SEQ_LEN) begin
					i_cdr[1] <= INIT_SEQ[init_counter][8];
					i_data <= INIT_SEQ[init_counter][7:0];
					i_en <= 1'b1;
					init_counter <= init_counter + 1'b1;
				end
				else begin
					current_state <= c_DATA;
					delay_left <= 24'(CLK_FREQ_MHz*10000); // Wait for memory access? ~10ms
				end
			end
			
			c_DATA: begin
				// Continous data loop
//				i_cdr <= 2'b10;
//				i_data <= current_byte ? 8'hF8 : 8'h00;
//				i_en <= 1'b1;
//				current_byte <= ~current_byte;
				
				i_cdr <= 2'b10;
				i_data <= !lowByte ? bufferData[15:8] : bufferData[7:0];
				i_en <= 1'b1;
				lowByte <= !lowByte;
			end
			
			default: begin
				current_state <= c_START;
			end
		endcase
	end
end



endmodule
