module LCD_RUBIKS_CUBE_DISPLAY (
	MAX10_CLK1_50,
	
	o_cs,
	o_dcrs,
	o_sdi,
	o_sck,
	o_lcdrst,
	
	t_sdo,
	t_irq,
	t_sdi,
	t_sck,
	t_cs
);

input MAX10_CLK1_50;

output o_cs;
output o_dcrs;
output o_sdi;
output o_sck;
output o_lcdrst;

input t_sdo;
input t_irq;
output t_sdi;
output t_sck;
output t_cs;

dual_boot u0 (
	.clk_clk		(MAX10_CLK1_50), // clk.clk
	.reset_reset_n (1'b1)		  // reset.reset_n
);

wire clk_100MHz;
wire clk_1MHz;

pll	pll_inst (
	.inclk0 ( MAX10_CLK1_50 ),
	.c0 ( clk_100MHz ),
	.c1 ( clk_1MHz )
	);


reg[16:0] bufferIndex;
wire incBuffer;

initial bufferIndex = 17'd0;

reg[8:0] x = 9'b0;
reg[7:0] y = 8'b0;

always_ff @ (posedge incBuffer) begin
	//bufferIndex <= (bufferIndex + 1'b1) % 17'(320*240); // Max buffer of 320*240
	if (bufferIndex == 76799) begin
		bufferIndex <= 17'b0;
		x <= 9'b0;
		y <= 8'b0;
	end
	else begin
		bufferIndex <= bufferIndex + 1'b1;

		if (y == 239) begin
			y <= 8'b0;
			x <= x + 1'b1;
		end
		else begin
			y <= y + 1'b1;
		end
	end
end

//wire[8:0] x = 9'(bufferIndex / 240); // x and y calculations
//wire[7:0] y = 8'(bufferIndex % 240);

//wire[143:0] cube_state = 144'h924924492492ffffff6db6dbdb6db6b6db6d;
//wire[143:0] cube_state = 144'h9249246db6dbffffffb6db6d492492db6db6;
//0XEDCD257675935FCA9CB93CAE7BF77FD64556
wire[143:0] cube_state;// = 144'hE94D2556779A7FCAD4B9ACEE5BF57FD6475E;//
wire[15:0] currentPixel;

RUBIKS_CUBE_STATE_LCD cube (
	cube_state,
	x,
	y,
	currentPixel
);


/*
Red = 3'b100
Orange = 3'b101
Blue = 3'b010
Green = 3'b011
White = 3'b111
Yellow = 3'b110
Black = 3'b000
// Solved State = 144'h924924492492ffffff6db6dbdb6db6b6db6d 
*/

LCD_SPI_CONTROLLER_RUBIK lcd (
	clk_100MHz,
	
	currentPixel,
	incBuffer,
	
	o_cs,
	o_dcrs,
	o_sdi,
	o_sck,
	o_lcdrst
);

reg t_en = 1'b0;
reg [7:0] touch_data_in = 8'b11010000;
wire t_busy;
wire [15:0] touch_data;
wire touch_data_valid;


TOUCH_SPI_MASTER touch (
	clk_1MHz, // 4MHz maximum, sck will be half this frequency and max spi clk frequency is 2MHz
	t_en,
	touch_data_in,
	t_sdo,
	t_irq,
	
	t_busy,
	touch_data,
	
	t_cs,
	t_sdi,
	t_sck,
	touch_data_valid
);

reg read_xy = 1'b1;
reg data_read = 1'b0;
reg [11:0] x_data = 12'b0;
reg [11:0] y_data = 12'b0;

reg [32:0] delay_left = 24'b0;
localparam CLK_FREQ_MHz = 1;

always @ (posedge clk_1MHz) begin
	t_en <= 1'b0;
	
	if (delay_left > 24'b0) begin
		delay_left <= delay_left - 1'b1; // Wait for delay to count down
	end
	else begin
		if (~t_busy && ~t_en && ~t_irq && read_xy) begin
			//touch_data_in <= read_xy ? 8'h09 : 8'h0B;
			touch_data_in <= 8'h09; // Read x
			t_en <= 1'b1;
			read_xy <= 1'b0;//~read_xy;
			data_read <= 1'b0;
			delay_left <= 24'b0;
		end
		else if (~t_busy && ~t_en && ~read_xy && data_read) begin
			touch_data_in <= 8'h0B; // Read y
			t_en <= 1'b1;
			read_xy <= 1'b1;//~read_xy;
			data_read <= 1'b0;
			delay_left <= 24'b0;
		end
		
		if (touch_data_valid && read_xy && ~data_read) begin
			y_data <= touch_data[15:4];
			data_read <= 1'b1;
			delay_left <= 24'(CLK_FREQ_MHz*15000); // Approx 150ms?
		end
		else if (touch_data_valid && ~read_xy && ~data_read) begin
			x_data <= touch_data[15:4];
			data_read <= 1'b1;
			delay_left <= 24'b0;
		end
	end
end

assign cube_state = (y_data > 450 && x_data > 450) ? 144'hE94D2556779A7FCAD4B9ACEE5BF57FD6475E : 144'h9249246db6dbffffffb6db6d492492db6db6;

endmodule
