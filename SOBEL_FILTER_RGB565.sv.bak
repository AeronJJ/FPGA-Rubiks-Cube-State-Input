module SOBEL_FILTER_RGB565 (
	input [15:0][8:0] data,
	output [15:0] output_pixel
);

localparam logic signed [8:0] vert_kernel [8:0] =    {{9'h001}, {9'h000}, {9'h101}, 
																		{9'h002}, {9'h000}, {9'h102}, 
																		{9'h001}, {9'h000}, {9'h101}};
															
localparam logic signed [8:0] horiz_kernel [8:0] =   {{9'h001}, {9'h002}, {9'h001}, 
																		{9'h000}, {9'h000}, {9'h000}, 
																		{9'h101}, {9'h102}, {9'h101}};


wire signed [8:0] grad_X_r;
wire signed [8:0] grad_X_g;
wire signed [8:0] grad_X_b;

wire signed [8:0] grad_Y_r;
wire signed [8:0] grad_Y_g;
wire signed [8:0] grad_Y_b;

wire [8:0] grad_r;
wire [8:0] grad_g;
wire [8:0] grad_b;

assign grad_r = grad_X_r[7:0] + grad_Y_r[7:0];
assign grad_g = grad_X_g[7:0] + grad_Y_g[7:0];
assign grad_b = grad_X_b[7:0] + grad_Y_b[7:0];


assign output_pixel = {grad_r[8:4], grad_g[8:3], grad_b[8:4]};

assign grad_X_r = vert_kernel[8] * data[0][15:11] + 
						vert_kernel[7] * data[1][15:11] + 
						vert_kernel[6] * data[2][15:11] +
						                      
						vert_kernel[5] * data[3][15:11] + 
						vert_kernel[4] * data[4][15:11] + 
						vert_kernel[3] * data[5][15:11] + 
						                      
						vert_kernel[2] * data[6][15:11] + 
						vert_kernel[1] * data[7][15:11] + 
						vert_kernel[0] * data[8][15:11];
						
assign grad_X_g = vert_kernel[8] * data[0][10:5] + 
						vert_kernel[7] * data[1][10:5] + 
						vert_kernel[6] * data[2][10:5] +
						                      
						vert_kernel[5] * data[3][10:5] + 
						vert_kernel[4] * data[4][10:5] + 
						vert_kernel[3] * data[5][10:5] + 
						                      
						vert_kernel[2] * data[6][10:5] + 
						vert_kernel[1] * data[7][10:5] + 
						vert_kernel[0] * data[8][10:5];

assign grad_X_b = vert_kernel[8] * data[0][4:0] + 
						vert_kernel[7] * data[1][4:0] + 
						vert_kernel[6] * data[2][4:0] +
						                      
						vert_kernel[5] * data[3][4:0] + 
						vert_kernel[4] * data[4][4:0] + 
						vert_kernel[3] * data[5][4:0] + 
						                      
						vert_kernel[2] * data[6][4:0] + 
						vert_kernel[1] * data[7][4:0] + 
						vert_kernel[0] * data[8][4:0];
						
						
						
assign grad_Y_r = horiz_kernel[8] * data[0][15:11] + 
						horiz_kernel[7] * data[1][15:11] + 
						horiz_kernel[6] * data[2][15:11] +
						                      
						horiz_kernel[5] * data[3][15:11] + 
						horiz_kernel[4] * data[4][15:11] + 
						horiz_kernel[3] * data[5][15:11] + 
						                      
						horiz_kernel[2] * data[6][15:11] + 
						horiz_kernel[1] * data[7][15:11] + 
						horiz_kernel[0] * data[8][15:11];
						
assign grad_Y_g = horiz_kernel[8] * data[0][10:5] + 
						horiz_kernel[7] * data[1][10:5] + 
						horiz_kernel[6] * data[2][10:5] +
						                          
						horiz_kernel[5] * data[3][10:5] + 
						horiz_kernel[4] * data[4][10:5] + 
						horiz_kernel[3] * data[5][10:5] + 
						                          
						horiz_kernel[2] * data[6][10:5] + 
						horiz_kernel[1] * data[7][10:5] + 
						horiz_kernel[0] * data[8][10:5];
						
assign grad_Y_b = horiz_kernel[8] * data[0][4:0] + 
						horiz_kernel[7] * data[1][4:0] + 
						horiz_kernel[6] * data[2][4:0] +
						                          
						horiz_kernel[5] * data[3][4:0] + 
						horiz_kernel[4] * data[4][4:0] + 
						horiz_kernel[3] * data[5][4:0] + 
						                          
						horiz_kernel[2] * data[6][4:0] + 
						horiz_kernel[1] * data[7][4:0] + 
						horiz_kernel[0] * data[8][4:0];
						
						

endmodule
